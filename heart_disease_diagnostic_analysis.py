# -*- coding: utf-8 -*-
"""Heart Disease Diagnostic Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w00Te1P8Fd-nsvhJnbUHejlmwe3WbVqz
"""

# Importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Loading the data
heart_data = pd.read_csv('/content/Heart Disease data.csv')

# Initial data inspection
print("Data Info:\n", heart_data.info())
print("Data Description:\n", heart_data.describe())
# Display column names to verify spelling and format
print(heart_data.columns)
heart_data.rename(columns={'cp': 'chest pain type'}, inplace=True)


# Checking for any missing values
print("Missing Values:\n", heart_data.isnull().sum())

# Data Cleaning - Drop any rows with missing values
heart_data = heart_data.dropna()

# Convert categorical columns to appropriate data types
heart_data['sex'] = heart_data['sex'].astype('category')
heart_data['chest pain type'] = heart_data['chest pain type'].astype('category')

# Verify data types after conversion
print("Data Types:\n", heart_data.dtypes)

#  Exploratory Data Analysis (EDA)

# Plot Heart Disease Distribution
plt.figure(figsize=(10, 6))
sns.countplot(x='target', data=heart_data)  # Assuming 'target' is the heart disease indicator column
plt.title('Heart Disease Distribution')
plt.xlabel('Heart Disease (1 = Disease, 0 = No Disease)')
plt.ylabel('Count')
plt.show()

# Plot Age Distribution
plt.figure(figsize=(10, 6))
sns.histplot(heart_data['age'], kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Plot Age and Heart Disease Relationship
plt.figure(figsize=(10, 6))
sns.boxplot(x='target', y='age', data=heart_data)
plt.title('Age vs Heart Disease')
plt.xlabel('Heart Disease (1 = Disease, 0 = No Disease)')
plt.ylabel('Age')
plt.show()

# Heart disease by gender
plt.figure(figsize=(10, 6))
sns.countplot(x='sex', hue='target', data=heart_data)
plt.title('Heart Disease by Gender')
plt.xlabel('Gender (0 = Female, 1 = Male)')
plt.ylabel('Count')
plt.legend(title='Heart Disease', labels=['No Disease', 'Disease'])
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(heart_data.corr(), annot=True, cmap='coolwarm')
plt.title('Attribute Correlations')
plt.show()

#  Key Insights Extraction

# Calculate Heart Disease Rate by Age Group
heart_data['age_group'] = pd.cut(heart_data['age'], bins=[20, 40, 60, 80], labels=['20-40', '40-60', '60-80'])
age_disease_rate = heart_data.groupby('age_group')['target'].mean()
print("Heart Disease Rate by Age Group:\n", age_disease_rate)

# Plot Heart Disease Rate by Age Group
age_disease_rate.plot(kind='bar', color='teal')
plt.title('Heart Disease Rate by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Heart Disease Rate')
plt.show()

# Calculate Gender-based Heart Disease Rate
gender_disease_rate = heart_data.groupby('sex')['target'].mean()
print("Heart Disease Rate by Gender:\n", gender_disease_rate)

# Plot Gender-based Heart Disease Rate
gender_disease_rate.plot(kind='bar', color='purple')
plt.title('Heart Disease Rate by Gender')
plt.xlabel('Gender (0 = Female, 1 = Male)')
plt.ylabel('Heart Disease Rate')
plt.show()

# Interactive Visualization with Plotly
# Plotly Histogram for Age Distribution by Heart Disease Status
fig = px.histogram(heart_data, x="age", color="target", title="Age Distribution by Heart Disease Status",
                   labels={"target": "Heart Disease"}, barmode='overlay')
fig.update_layout(xaxis_title="Age", yaxis_title="Count")
fig.show()

# Scatter plot for Max Heart Rate vs Age, colored by Heart Disease status
# Replace 'maximum heart rate achieved' with 'thalach'
fig = px.scatter(heart_data, x='age', y='thalach', color='target',
                 title="Max Heart Rate vs Age by Heart Disease Status",
                 labels={"target": "Heart Disease", "thalach": "Max Heart Rate"})
fig.update_layout(xaxis_title="Age", yaxis_title="Max Heart Rate Achieved")
fig.show()

# Final Correlation Check for Important Features
important_features = ['age', 'sex', 'chest pain type', 'restecg', 'chol',
                      'thalach', 'target']
sns.pairplot(heart_data[important_features], hue='target', palette="coolwarm")
plt.show()